<?php

namespace Starcode\Models;
use Phalcon\Acl\RoleInterface;
use Phalcon\Mvc\Model\Validator\Uniqueness;

/**
 * Role
 * 
 * @package Starcode\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2016-04-29, 00:18:38
 */
class Role extends \Phalcon\Mvc\Model implements IIdentifier
{

    /**
     *
     * @var integer
     */
    protected $id;

    /**
     *
     * @var string
     */
    protected $name;

    public function getIdentifierValue()
    {
        return $this->id;
    }

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field name
     *
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the value of field name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->hasMany('id', 'Starcode\Models\Users', 'role', array('alias' => 'Users'));
    }


    public function __toString()
    {
        return $this->name;
    }

    /**
     */
    public function validation()
    {
        $this->validate(new Uniqueness(array(
                                           "field"   => "name",
                                           "message" => $this->getDI()->get('trans')->_('role.unique.error')
                                       )));

        return $this->validationHasFailed() != TRUE;
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     *
     * @return Role[]
     */
    public static function find($parameters = NULL)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     *
     * @return Role
     */
    public static function findFirst($parameters = NULL)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'role';
    }

}
